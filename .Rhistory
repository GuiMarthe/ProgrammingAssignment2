cacheSolve <- function(x,...){
m <- x$getinverse()
print(m)
print(class(m))
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
print(data)
print(class(data))
m <- solve(data,...)
print(m)
print(class(m))
x$setinverse(m)
print(x$setinverse)
m
}
makeCacheMatrix <- function( x = matrix()) {
m <- NULL
set <- function(y) {
(x <<- y)
(m <<- NULL)
}
get <- function() x
print(get)
print(class(get))
setinverse <- function(solve) m <<- solve
print(setinverse)
print(class(setinverse))
getinverse <- function() m
print(getinverse)
print(class(setinverse))
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x,...){
m <- x$getinverse()
print(m)
print(class(m))
if(!is.null(m)){
message("getting cached data")
return(m)
}
data <- x$get()
print(data)
print(class(data))
m <- solve(data,...)
print(m)
print(class(m))
x$setinverse(m)
print(x$setinverse)
m
}
x <- matrix(c(4,3,3,2),2,2)
x
cacheSolve(x)
makeCacheMatrix(x)
makeCacheMatrix(x) -> xc
cacheSolve(xc)
makeCacheMatrix <- function( x = matrix()) {
m <- NULL
set <- function(y) {
(x <<- y)
(m <<- NULL)
}
get <- x
print(get)
print(class(get))
setinverse <- function(solve) m <<- solve
print(setinverse)
print(class(setinverse))
getinverse <- function() m
print(getinverse)
print(class(setinverse))
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x) -> xc
cacheSolve(xc)
makeCacheMatrix <- function( x = matrix()) {
m <- NULL
set <- function(y) {
(x <<- y)
(m <<- NULL)
}
get <- function() x
print(get)
print(class(get))
setinverse <- function(solve) m <<- solve
print(setinverse)
print(class(setinverse))
getinverse <- function() m
print(getinverse)
print(class(setinverse))
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x) -> xc
cacheSolve(xc)
cacheSolve(xc)
search()
x <- matrix(c(4,3,5,2),2,2)
x
makeCacheMatrix(x) -> xc
cacheSolve(xc)
makeCacheMatrix(x) -> xc
makeCacheMatrix <- function( x = matrix()) {
m <- NULL
set <- function(y) {
(x <<- y)
(m <<- NULL)
print(x)
print(class(x))
print(m)
print(class(m))
}
get <- function() x
print(get)
print(class(get))
setinverse <- function(solve) m <<- solve
print(setinverse)
print(class(setinverse))
getinverse <- function() m
print(getinverse)
print(class(setinverse))
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x) -> xc
cacheSolve(xc)
makeCacheMatrix <- function( x = matrix()) {
m <- NULL
set <- function(y) {
(x <<- y)
(m <<- NULL)
print(x)
print(class(x))
print(m)
print(class(m))
}
get <- function() {x}
print(get)
print(class(get))
setinverse <- function(solve) m <<- solve
print(setinverse)
print(class(setinverse))
getinverse <- function() m
print(getinverse)
print(class(setinverse))
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x) -> xc
cacheSolve(xc)
cacheSolve(xc)
